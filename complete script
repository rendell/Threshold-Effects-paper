# =============================================================================
# COMPLETE TABLES AND FIGURES GENERATOR - ITERATION 8
# Paper: "The High-Magnitude Paradox: Threshold Effects in Single-District Small Assemblies"
# =============================================================================
# 
# Author: Rendell Ernest de Kort
# Date: January 2025
# Version: 8.0 - FIXED ERI calculations for all methods
# =============================================================================

# Clear workspace and setup
rm(list = ls())

# Load required packages
packages <- c("tidyverse", "ggplot2", "dplyr", "tidyr", "knitr", "scales", "gridExtra")
for (pkg in packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
    library(pkg, character.only = TRUE)
  }
}

# Set options
options(scipen = 999)
set.seed(2025)

# Create output directories
if (!dir.exists("tables")) dir.create("tables")
if (!dir.exists("figures")) dir.create("figures")

# Helper function for separator lines
print_separator <- function() {
  cat(paste(rep("=", 70), collapse = ""), "\n")
}

print_separator()
cat("GENERATING ALL TABLES AND FIGURES FOR PAPER - ITERATION 8\n")
cat("FIXED: ERI now correctly measures % of votes going to parties that won seats\n")
print_separator()
cat("\n")

# =============================================================================
# PART 1: ELECTORAL SYSTEM FUNCTIONS - CORRECTED ERI CALCULATIONS
# =============================================================================

# Aruba: Kiesdeler threshold
# Parties must reach kiesdeler to compete for remainder seats
allocate_seats_aruba <- function(votes, parties, total_seats = 21) {
  total_votes <- sum(votes)
  kiesdeler <- round(total_votes / total_seats)
  initial_seats <- floor(votes / kiesdeler)
  remaining_seats <- total_seats - sum(initial_seats)
  
  allocation <- data.frame(
    party = parties, votes = votes, seats = initial_seats,
    stringsAsFactors = FALSE
  )
  
  # Allocate remainder seats only to parties reaching kiesdeler
  while (remaining_seats > 0) {
    allocation$divisor <- allocation$votes / (allocation$seats + 1)
    eligible <- which(allocation$votes >= kiesdeler)
    if (length(eligible) == 0) break
    winner <- eligible[which.max(allocation$divisor[eligible])]
    allocation$seats[winner] <- allocation$seats[winner] + 1
    remaining_seats <- remaining_seats - 1
  }
  
  # ERI = votes for parties that got seats / total votes
  effective_votes <- sum(allocation$votes[allocation$seats > 0])
  eri <- effective_votes / total_votes
  
  list(allocation = allocation, eri = eri, kiesdeler = kiesdeler)
}

# Sint Maarten: Electoral quota threshold
# Parties below quota are excluded entirely
allocate_seats_sint_maarten <- function(votes, parties, total_seats = 15) {
  total_votes <- sum(votes)
  quota <- round(total_votes / total_seats)
  
  # Filter out parties below quota first
  eligible_mask <- votes >= quota
  eligible_votes <- votes[eligible_mask]
  eligible_parties <- parties[eligible_mask]
  
  if (length(eligible_votes) == 0) {
    # Fallback if no parties meet quota (shouldn't happen)
    eligible_votes <- votes
    eligible_parties <- parties
    eligible_mask <- rep(TRUE, length(votes))
  }
  
  # Allocate seats only among eligible parties
  eligible_total <- sum(eligible_votes)
  initial_seats <- floor(eligible_votes / quota)
  remaining_seats <- total_seats - sum(initial_seats)
  
  eligible_allocation <- data.frame(
    party = eligible_parties, 
    votes = eligible_votes, 
    seats = initial_seats,
    stringsAsFactors = FALSE
  )
  
  # D'Hondt for remainders among eligible parties
  while (remaining_seats > 0 && nrow(eligible_allocation) > 0) {
    eligible_allocation$divisor <- eligible_allocation$votes / (eligible_allocation$seats + 1)
    winner <- which.max(eligible_allocation$divisor)
    eligible_allocation$seats[winner] <- eligible_allocation$seats[winner] + 1
    remaining_seats <- remaining_seats - 1
  }
  
  # Create full allocation including excluded parties
  allocation <- data.frame(
    party = parties,
    votes = votes,
    seats = rep(0, length(parties)),
    stringsAsFactors = FALSE
  )
  
  # Fill in seats for eligible parties
  for (i in 1:nrow(eligible_allocation)) {
    idx <- which(allocation$party == eligible_allocation$party[i])
    allocation$seats[idx] <- eligible_allocation$seats[i]
  }
  
  # ERI = votes for parties that got seats / total votes
  effective_votes <- sum(allocation$votes[allocation$seats > 0])
  eri <- effective_votes / total_votes
  
  list(allocation = allocation, eri = eri, quota = quota)
}

# Standard D'Hondt - ALL parties can compete
allocate_seats_dhondt <- function(votes, parties, total_seats = 21) {
  allocation <- data.frame(
    party = parties, votes = votes, seats = rep(0, length(parties)),
    stringsAsFactors = FALSE
  )
  
  for (i in 1:total_seats) {
    allocation$divisor <- allocation$votes / (allocation$seats + 1)
    winner <- which.max(allocation$divisor)
    allocation$seats[winner] <- allocation$seats[winner] + 1
  }
  
  # ERI = votes for parties that got seats / total votes
  effective_votes <- sum(allocation$votes[allocation$seats > 0])
  eri <- effective_votes / sum(votes)
  
  list(allocation = allocation, eri = eri)
}

# Graduated thresholds (75%/50%) - Curaçao post-2021
allocate_seats_graduated <- function(votes, parties, total_seats = 21) {
  total_votes <- sum(votes)
  kiesdeler <- round(total_votes / total_seats)
  initial_seats <- floor(votes / kiesdeler)
  remaining_seats <- total_seats - sum(initial_seats)
  
  allocation <- data.frame(
    party = parties, 
    votes = votes, 
    seats = initial_seats,
    stringsAsFactors = FALSE
  )
  
  # Define both thresholds at the start
  threshold_75 <- 0.75 * kiesdeler
  threshold_50 <- 0.50 * kiesdeler
  
  # First round: 75% threshold
  while (remaining_seats > 0) {
    allocation$remainders <- votes - (allocation$seats * kiesdeler)
    eligible <- which(allocation$votes >= threshold_75 & allocation$remainders > 0)
    
    if (length(eligible) == 0) break
    
    winner <- eligible[which.max(allocation$remainders[eligible])]
    allocation$seats[winner] <- allocation$seats[winner] + 1
    remaining_seats <- remaining_seats - 1
  }
  
  # Second round: 50% threshold
  if (remaining_seats > 0) {
    while (remaining_seats > 0) {
      allocation$remainders <- votes - (allocation$seats * kiesdeler)
      eligible <- which(allocation$votes >= threshold_50 & allocation$remainders > 0)
      
      if (length(eligible) == 0) break
      
      winner <- eligible[which.max(allocation$remainders[eligible])]
      allocation$seats[winner] <- allocation$seats[winner] + 1
      remaining_seats <- remaining_seats - 1
    }
  }
  
  # ERI = votes for parties that got seats / total votes
  effective_votes <- sum(allocation$votes[allocation$seats > 0])
  eri <- effective_votes / total_votes
  
  list(allocation = allocation, eri = eri, kiesdeler = kiesdeler, 
       threshold_75 = threshold_75, threshold_50 = threshold_50)
}

# Sainte-Laguë - ALL parties can compete
allocate_seats_sainte_lague <- function(votes, parties, total_seats) {
  allocation <- data.frame(
    party = parties, votes = votes, seats = rep(0, length(parties)),
    stringsAsFactors = FALSE
  )
  
  for (i in 1:total_seats) {
    allocation$divisor <- allocation$votes / (2 * allocation$seats + 1)
    winner <- which.max(allocation$divisor)
    allocation$seats[winner] <- allocation$seats[winner] + 1
  }
  
  # ERI = votes for parties that got seats / total votes
  effective_votes <- sum(allocation$votes[allocation$seats > 0])
  eri <- effective_votes / sum(votes)
  
  list(allocation = allocation, eri = eri)
}

# =============================================================================
# PART 2: LOAD ALL ELECTORAL DATA
# =============================================================================

cat("Loading electoral data...\n\n")

# Complete electoral data for all territories
elections_data <- list(
  # ARUBA (12 elections)
  list(territory="Aruba", year=1985, seats=21, votes=c(13786,11480,4499,3661,3216), 
       parties=c("MEP","AVP","PPA","PDA","ADN"), registered=NA, turnout=NA),
  list(territory="Aruba", year=1989, seats=21, votes=c(16555,12668,2298,1874,1772,694,171), 
       parties=c("MEP","AVP","ADN","PPN","PPA","PDA","AD86"), registered=NA, turnout=NA),
  list(territory="Aruba", year=1993, seats=21, votes=c(15621,14907,3056,2314,2094,1075,403,397), 
       parties=c("AVP","MEP","OLA","ADN","PPA","PPN","PDA","Corona"), registered=NA, turnout=NA),
  list(territory="Aruba", year=1994, seats=21, votes=c(17963,15437,4415,1751), 
       parties=c("AVP","MEP","OLA","PPA"), registered=NA, turnout=NA),
  list(territory="Aruba", year=1997, seats=21, votes=c(19476,17358,3976,2052,1092,519,268), 
       parties=c("AVP","MEP","OLA","PPA","ADN","PARA","MAS"), registered=NA, turnout=NA),
  list(territory="Aruba", year=2001, seats=21, votes=c(25172,12749,4598,2713,1666,540,531), 
       parties=c("MEP","AVP","PPA","OLA","ADA","CLA","ADN"), registered=NA, turnout=NA),
  list(territory="Aruba", year=2005, seats=21, votes=c(22002,16725,3661,3330,2414,1725,1092,237,131), 
       parties=c("MEP","AVP","MPA","RED","PDR","OLA","PPA","MSA","PPT"), registered=NA, turnout=NA),
  list(territory="Aruba", year=2009, seats=21, votes=c(26476,19804,3144,2444,2378,611,139,125), 
       parties=c("AVP","MEP","PDR","MPA","RED","PPA","CURPA","OLA/MSI"), registered=65000, turnout=84.8),
  list(territory="Aruba", year=2013, seats=21, votes=c(506,33103,4518,805,17653,1209), 
       parties=c("PPA","AVP","PDR","UPP","MEP","RED"), registered=68756, turnout=84.1),
  list(territory="Aruba", year=2017, seats=21, votes=c(2107,656,22061,468,5531,287,4166,23376), 
       parties=c("RAIZ","UPP","MEP","CURPA","POR","MAS","RED","AVP"), registered=70749, turnout=82.9),
  list(territory="Aruba", year=2021, seats=21, votes=c(3410,1809,4681,621,20700,249,661,18335,574,312,5474,1784), 
       parties=c("A21","PPA","MAS","UPP","MEP","HTC","POR","AVP","PP","CURPA","RAIZ","RED"), registered=70283, turnout=83.4),
  list(territory="Aruba", year=2024, seats=21, votes=c(1722,3538,2323,505,423,7349,1349,635,2204,17572,17876), 
       parties=c("MAS","PPA","RAIZ","HTC","CURPA","FUTURO","LPR","RED","A21","MEP","AVP"), registered=69824, turnout=80.9),
  
  # CURAÇAO (6 elections)
  list(territory="Curaçao", year=2010, seats=21, votes=c(22474,15953,13886,6531,4813,4588,3048,2202,509,336), 
       parties=c("PAR","MFK","PS","MAN","FOL","PNP","DP","PAIS","PCTP","LNPA"), registered=114828, turnout=64.8),
  list(territory="Curaçao", year=2012, seats=21, votes=c(19715,18450,17179,15286,8294,5130,1790,1127), 
       parties=c("PS","MFK","PAR","PAIS","MAN","PNP","FOL","DP-L"), registered=116857, turnout=75.3),
  list(territory="Curaçao", year=2016, seats=21, votes=c(12839,12671,11949,8254,7017,5323,4845,4140,3654,3452,1963,1867,1146), 
       parties=c("MAN","MFK","PAR","KNT","PNP","PS","Hustu","MP","PAIS","MPAS","DP","MKP","Pro"), registered=120456, turnout=65.7),
  list(territory="Curaçao", year=2017, seats=21, votes=c(18368,16070,15706,4200,7439,3099,1975,3880,4028,3206,859), 
       parties=c("PAR","MAN","MFK","PIN","KNT","PNP","KP","MP","PS","Hustu","FOP"), registered=119324, turnout=66.1),
  list(territory="Curaçao", year=2021, seats=21, votes=c(23554,11781,10573,5463,4542,4413,3962,3733,3541,3521,2454,2391,2241,1461,1216), 
       parties=c("MFK","PAR","PNP","MAN","KEM","TPK","KPK","PIN","KV","KNT","KP","PD","KMHN","MP","PS"), registered=116141, turnout=69.6),
  list(territory="Curaçao", year=2025, seats=21, votes=c(41654,12228,7600,6393,3933,2766,2363), 
       parties=c("MFK","PNP","PAR","MAN-PIN","KPK","KEM","Hustu"), registered=111932, turnout=68.7),
  
  # SINT MAARTEN (6 elections)
  list(territory="Sint Maarten", year=2010, seats=15, votes=c(6273,4936,2340,127), 
       parties=c("NA","UPP","DP","CPA"), registered=19601, turnout=69.8),
  list(territory="Sint Maarten", year=2014, seats=15, votes=c(6211,4055,2342,1647,169,132), 
       parties=c("UPP","NA","DP","USP","OSMPP","SRP"), registered=21439, turnout=67.9),
  list(territory="Sint Maarten", year=2016, seats=15, votes=c(4130,3778,2784,1813,848,346,234,203,75), 
       parties=c("UPP","NA","USP","DP","SMCP","SMDM","PPA","OSMPP","HOPE"), registered=22302, turnout=63.7),
  list(territory="Sint Maarten", year=2018, seats=15, votes=c(5748,4500,3500,2500,1500), 
       parties=c("UD","NA","UPP","DP","SMCP"), registered=NA, turnout=NA),
  list(territory="Sint Maarten", year=2020, seats=15, votes=c(4715,3231,2800,2200,1800,1500), 
       parties=c("NA","UPP","DP","UP","PFP","NOW"), registered=NA, turnout=NA),
  list(territory="Sint Maarten", year=2024, seats=15, votes=c(3455,2814,2028,1970,1717,1481,686,292), 
       parties=c("NA","UPP","URSM","DP","PFP","NOW","USP","ECE"), registered=22553, turnout=64.0)
)

# =============================================================================
# PART 3: CALCULATE ALL ERI VALUES AND VERIFY
# =============================================================================

cat("Calculating ERI values for all elections and methods...\n")
cat("ERI = % of votes going to parties that received seats\n\n")

results <- data.frame()

for (e in elections_data) {
  # Calculate current system ERI
  if (e$territory == "Aruba") {
    current <- allocate_seats_aruba(e$votes, e$parties, e$seats)
  } else if (e$territory == "Sint Maarten") {
    current <- allocate_seats_sint_maarten(e$votes, e$parties, e$seats)
  } else { # Curaçao
    if (e$year < 2021) {
      current <- allocate_seats_dhondt(e$votes, e$parties, e$seats)
    } else {
      current <- allocate_seats_graduated(e$votes, e$parties, e$seats)
    }
  }
  
  # Calculate alternative methods
  graduated <- allocate_seats_graduated(e$votes, e$parties, e$seats)
  sainte <- allocate_seats_sainte_lague(e$votes, e$parties, e$seats)
  
  # Verify no impossible values
  if (current$eri >= 0.999) {
    cat("WARNING: Suspicious ERI for", e$territory, e$year, ":", current$eri, "\n")
  }
  
  results <- rbind(results, data.frame(
    Territory = e$territory,
    Year = e$year,
    Seats = e$seats,
    Total_Votes = sum(e$votes),
    Registered_Voters = ifelse(is.null(e$registered), NA, e$registered),
    Turnout_Percent = ifelse(is.null(e$turnout), NA, e$turnout),
    ERI_Current = current$eri,
    ERI_Sainte_Lague = sainte$eri,
    ERI_75_50 = graduated$eri,
    stringsAsFactors = FALSE
  ))
}

# Display verification of corrected values
cat("\nVERIFICATION: Sample of corrected ERI values:\n")
print_separator()
sample_check <- results %>%
  filter((Territory == "Aruba" & Year == 1985) | 
           (Territory == "Sint Maarten" & Year %in% c(2018, 2020)) |
           (Territory == "Curaçao" & Year == 2025)) %>%
  select(Territory, Year, ERI_Current) %>%
  mutate(ERI_Current = round(ERI_Current, 3))
print(sample_check)
cat("\n")

# =============================================================================
# GALLAGHER INDEX ANALYSIS
# =============================================================================

cat("\n=== CALCULATING GALLAGHER INDEX AND ERI CORRELATION ===\n\n")

# Function to calculate Gallagher Index
calculate_gallagher <- function(votes, seats, total_seats) {
  total_votes <- sum(votes)
  vote_pct <- (votes / total_votes) * 100
  seat_pct <- (seats / total_seats) * 100
  gallagher <- sqrt(0.5 * sum((vote_pct - seat_pct)^2))
  return(gallagher)
}

# Calculate Gallagher index for each election
gallagher_results <- data.frame()

for (e in elections_data) {
  # Get seat allocation based on current system
  if (e$territory == "Aruba") {
    allocation <- allocate_seats_aruba(e$votes, e$parties, e$seats)$allocation
  } else if (e$territory == "Sint Maarten") {
    allocation <- allocate_seats_sint_maarten(e$votes, e$parties, e$seats)$allocation
  } else { # Curaçao
    if (e$year < 2021) {
      allocation <- allocate_seats_dhondt(e$votes, e$parties, e$seats)$allocation
    } else {
      allocation <- allocate_seats_graduated(e$votes, e$parties, e$seats)$allocation
    }
  }
  
  # Calculate Gallagher index
  gallagher <- calculate_gallagher(e$votes, allocation$seats, e$seats)
  
  # Get ERI from our results dataframe
  eri <- results$ERI_Current[results$Territory == e$territory & results$Year == e$year]
  
  gallagher_results <- rbind(gallagher_results, data.frame(
    Territory = e$territory,
    Year = e$year,
    ERI = eri,
    Gallagher = gallagher,
    stringsAsFactors = FALSE
  ))
}

# Display the corrected results
cat("CORRECTED ERI VALUES (showing full dataset):\n")
print_separator()
gallagher_results$YearLabel <- paste0("'", substr(as.character(gallagher_results$Year), 3, 4))
print(gallagher_results %>% 
        mutate(ERI = round(ERI, 3), 
               Gallagher = round(Gallagher, 2),
               Excluded_Pct = paste0(round((1-ERI)*100, 1), "%")), 
      row.names = FALSE)
write.csv(gallagher_results, "tables/Corrected_ERI_Gallagher.csv", row.names = FALSE)

# Calculate correlation
correlation_value <- round(cor(gallagher_results$ERI, gallagher_results$Gallagher, use = "complete.obs"), 3)

cat("\n")
cat("Correlation between ERI and Gallagher Index: r =", correlation_value, "\n")
cat("Interpretation: Weak", ifelse(correlation_value < 0, "negative", "positive"), "relationship\n")

# =============================================================================
# MAIN TEXT TABLES
# =============================================================================

cat("\n\n=== GENERATING MAIN TEXT TABLES ===\n\n")

# TABLE 1: Summary of Electoral System Performance
table1 <- results %>%
  group_by(Territory) %>%
  summarise(
    Elections = n(),
    `Time Period` = paste0(min(Year), "-", max(Year)),
    `Mean ERI` = round(mean(ERI_Current), 3),
    `ERI Range` = paste0(round(min(ERI_Current), 3), "-", round(max(ERI_Current), 3)),
    `Mean Turnout` = ifelse(all(is.na(Turnout_Percent)), "N/A",
                            paste0(round(mean(Turnout_Percent, na.rm = TRUE), 1), "%")),
    .groups = 'drop'
  )

# Add electoral system column
table1$`Electoral System` <- ifelse(table1$Territory == "Aruba", "Kiesdeler threshold",
                                    ifelse(table1$Territory == "Sint Maarten", "Electoral quota threshold",
                                           "D'Hondt → Graduated thresholds (2021)"))

cat("TABLE 1: Summary of Electoral System Performance (CAS Territories)\n")
print_separator()
print(table1)
write.csv(table1, "tables/Table1_Summary_Statistics_Corrected.csv", row.names = FALSE)

# =============================================================================
# FIGURES: COMPARATIVE VISUALIZATIONS
# =============================================================================

cat("\n=== GENERATING COMPARATIVE VISUALIZATIONS ===\n\n")

# Set the inclusion thresholds for all visualizations
eri_midpoint <- 0.85      # 85% threshold for meaningful inclusion
gallagher_midpoint <- 5.5  # Standard threshold for proportionality

# FIGURE 1: ERI vs Gallagher Index Scatter Plot with Quadrants
# Prepare year labels - showing last 2 digits for space
gallagher_results$YearLabel <- paste0("'", substr(as.character(gallagher_results$Year), 3, 4))

# Create quadrant labels
quadrant_labels <- data.frame(
  x = c(0.75, 0.93, 0.75, 0.93),
  y = c(3, 3, 8.5, 8.5),
  label = c("Exclusive but\nProportional\n(Threshold Democracy)", 
            "Inclusive and\nProportional\n(Democratic Ideal)",
            "Exclusive and\nDistorted\n(Democratic Failure)", 
            "Inclusive but\nDistorted\n(Majoritarian Tendencies)"),
  stringsAsFactors = FALSE
)

# Add Curaçao reform annotation
curacao_reform <- gallagher_results %>%
  filter(Territory == "Curaçao", Year %in% c(2017, 2021, 2025))

# Create the scatter plot
p_eri_gallagher <- ggplot(gallagher_results, aes(x = ERI, y = Gallagher)) +
  # Add quadrant shading
  annotate("rect", xmin = 0.65, xmax = eri_midpoint, ymin = 0, ymax = gallagher_midpoint,
           alpha = 0.1, fill = "blue") +
  annotate("rect", xmin = eri_midpoint, xmax = 1, ymin = 0, ymax = gallagher_midpoint,
           alpha = 0.1, fill = "green") +
  annotate("rect", xmin = 0.65, xmax = eri_midpoint, ymin = gallagher_midpoint, ymax = 12,
           alpha = 0.1, fill = "red") +
  annotate("rect", xmin = eri_midpoint, xmax = 1, ymin = gallagher_midpoint, ymax = 12,
           alpha = 0.1, fill = "orange") +
  # Add quadrant lines
  geom_vline(xintercept = eri_midpoint, linetype = "dashed", alpha = 0.5) +
  geom_hline(yintercept = gallagher_midpoint, linetype = "dashed", alpha = 0.5) +
  # Add points
  geom_point(aes(color = Territory), size = 3, alpha = 0.8) +
  # Highlight Curaçao's reform trajectory
  geom_path(data = curacao_reform, aes(x = ERI, y = Gallagher),
            arrow = arrow(length = unit(0.3, "cm"), type = "open"),
            linewidth = 1, color = "darkgreen", alpha = 0.7) +
  # Add quadrant labels
  geom_text(data = quadrant_labels, 
            aes(x = x, y = y, label = label),
            size = 3.5, color = "gray30", fontface = "italic") +
  # Add year labels
  geom_text(aes(label = YearLabel),
            size = 2.5,
            vjust = -0.5,
            hjust = 0.5,
            check_overlap = TRUE,
            show.legend = FALSE) +
  # Scales and labels
  scale_x_continuous(limits = c(0.65, 1), labels = scales::percent) +
  scale_y_continuous(limits = c(0, 12)) +
  scale_color_manual(values = c("Aruba" = "#1f77b4", 
                                "Curaçao" = "#2ca02c", 
                                "Sint Maarten" = "#ff7f0e")) +
  labs(
    title = "Process vs Outcome: ERI and Gallagher Index Relationship",
    subtitle = paste0("Correlation: r = ", correlation_value, " (weak negative relationship)"),
    x = "Effective Representation Index (Process Inclusion)",
    y = "Gallagher Index (Outcome Disproportionality)",
    caption = "Note: Lower Gallagher scores indicate better proportionality. Arrow shows Curaçao's reform trajectory.\nQuadrants reveal how systems can be inclusive yet distorted, or exclusive yet proportional.",
    color = "Territory"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 11, color = "gray40"),
    plot.caption = element_text(size = 9, hjust = 0),
    legend.position = "right",
    panel.grid.minor = element_blank(),
    axis.title = element_text(size = 11),
    axis.text = element_text(size = 10)
  )

print(p_eri_gallagher)
ggsave("figures/Figure_ERI_vs_Gallagher.png", p_eri_gallagher, 
       width = 12, height = 8, dpi = 300)

# FIGURE 2: Faceted version for clearer year labels
gallagher_results_sorted <- gallagher_results %>%
  arrange(Territory, Year)

p_eri_gallagher_faceted <- ggplot(gallagher_results_sorted, aes(x = ERI, y = Gallagher)) +
  # Add quadrant shading
  annotate("rect", xmin = 0.65, xmax = eri_midpoint, ymin = 0, ymax = gallagher_midpoint,
           alpha = 0.05, fill = "blue") +
  annotate("rect", xmin = eri_midpoint, xmax = 1, ymin = 0, ymax = gallagher_midpoint,
           alpha = 0.05, fill = "green") +
  annotate("rect", xmin = 0.65, xmax = eri_midpoint, ymin = gallagher_midpoint, ymax = 12,
           alpha = 0.05, fill = "red") +
  annotate("rect", xmin = eri_midpoint, xmax = 1, ymin = gallagher_midpoint, ymax = 12,
           alpha = 0.05, fill = "orange") +
  # Add quadrant lines
  geom_vline(xintercept = eri_midpoint, linetype = "dashed", alpha = 0.3) +
  geom_hline(yintercept = gallagher_midpoint, linetype = "dashed", alpha = 0.3) +
  # Add chronological path lines
  geom_path(aes(group = Territory), color = "gray60", alpha = 0.2, linewidth = 0.5) +
  # Add points
  geom_point(aes(color = Territory), size = 3) +
  # Add year labels
  geom_text(aes(label = YearLabel), size = 2.5, vjust = -0.8) +
  # Facet by territory
  facet_wrap(~Territory, ncol = 3) +
  # Scales and labels
  scale_x_continuous(limits = c(0.65, 1), labels = scales::percent) +
  scale_y_continuous(limits = c(0, 12)) +
  scale_color_manual(values = c("Aruba" = "#1f77b4", 
                                "Curaçao" = "#2ca02c", 
                                "Sint Maarten" = "#ff7f0e")) +
  labs(
    title = "Process vs Outcome by Territory: ERI and Gallagher Index Over Time",
    subtitle = paste0("Vertical line at ", eri_midpoint*100, "% ERI separates inclusive from exclusive systems"),
    x = "Effective Representation Index (Process Inclusion)",
    y = "Gallagher Index (Outcome Disproportionality)",
    caption = "Green: Democratic Ideal | Blue: Threshold Democracy | Orange: Majoritarian | Red: Democratic Failure\nFaint lines show chronological progression of elections"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 11, color = "gray40"),
    plot.caption = element_text(size = 9, hjust = 0),
    legend.position = "none",
    strip.text = element_text(face = "bold", size = 10),
    panel.grid.minor = element_blank(),
    axis.title = element_text(size = 10),
    axis.text = element_text(size = 9)
  )

print(p_eri_gallagher_faceted)
ggsave("figures/Figure_ERI_vs_Gallagher_Faceted.png", p_eri_gallagher_faceted, 
       width = 14, height = 5, dpi = 300)

# FIGURE 3: ERI BY TERRITORY AND METHOD (COMPARISON)
plot_data <- results %>%
  select(Territory, Year, ERI_Current, ERI_Sainte_Lague, ERI_75_50) %>%
  pivot_longer(cols = starts_with("ERI_"), 
               names_to = "Method", 
               values_to = "ERI") %>%
  mutate(Method = case_when(
    Method == "ERI_Current" ~ "Current System",
    Method == "ERI_Sainte_Lague" ~ "Sainte-Laguë",
    Method == "ERI_75_50" ~ "75%/50% Threshold",
    TRUE ~ "Unknown"
  ))

p_comparison <- ggplot(plot_data, aes(x = Year, y = ERI, color = Method, linetype = Method)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2) +
  facet_wrap(~Territory, ncol = 3, scales = "free_x") +
  scale_color_manual(values = c("Current System" = "#1f77b4", 
                                "Sainte-Laguë" = "#ff7f0e", 
                                "75%/50% Threshold" = "#2ca02c")) +
  scale_linetype_manual(values = c("Current System" = "solid", 
                                   "Sainte-Laguë" = "dashed", 
                                   "75%/50% Threshold" = "dotted")) +
  scale_y_continuous(limits = c(0.65, 1), labels = scales::percent) +
  labs(
    title = "Electoral System Comparison: ERI by Territory and Method",
    subtitle = "Comparing current systems with alternative allocation methods",
    x = "Election Year",
    y = "Effective Representation Index (ERI)",
    caption = "Note: Curaçao switched from D'Hondt to 75%/50% graduated thresholds in 2021"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 11, color = "gray40"),
    legend.position = "bottom",
    strip.text = element_text(face = "bold", size = 11),
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

print(p_comparison)
ggsave("figures/Figure1_ERI_by_Territory_and_Method.png", p_comparison, 
       width = 14, height = 6, dpi = 300)

# Additional analysis: Distribution of elections by quadrant
divergent_cases <- gallagher_results %>%
  mutate(
    Quadrant = case_when(
      ERI < eri_midpoint & Gallagher < gallagher_midpoint ~ "Exclusive but Proportional",
      ERI >= eri_midpoint & Gallagher < gallagher_midpoint ~ "Inclusive and Proportional",
      ERI < eri_midpoint & Gallagher >= gallagher_midpoint ~ "Exclusive and Distorted",
      ERI >= eri_midpoint & Gallagher >= gallagher_midpoint ~ "Inclusive but Distorted"
    )
  ) %>%
  group_by(Quadrant) %>%
  summarise(
    Count = n(),
    Example = paste0(first(Territory), " ", first(Year)),
    .groups = 'drop'
  )

cat("\n")
cat("Distribution of Elections by Democratic Quadrant:\n")
print_separator()
print(divergent_cases)

# =============================================================================
# SUMMARY REPORT
# =============================================================================

cat("\n")
print_separator()
cat("ANALYSIS COMPLETED - ITERATION 8 (CORRECTED WITH PLOTS)\n")
print_separator()
cat("\n")

cat("Key Findings (Corrected Values):\n")
curacao_2025 <- results$ERI_Current[results$Territory == "Curaçao" & results$Year == 2025]
cat("  - Curaçao 2025 ERI:", round(curacao_2025, 3), "\n")
cat("  - Correlation between ERI and Gallagher: r =", correlation_value, "\n")

aruba_mean <- mean(results$ERI_Current[results$Territory == "Aruba"])
cat("  - Aruba mean ERI:", round(aruba_mean, 3), "\n")

sint_mean <- mean(results$ERI_Current[results$Territory == "Sint Maarten"])
cat("  - Sint Maarten mean ERI:", round(sint_mean, 3), "\n")

cat("\nAll outputs saved to:\n")
cat("  - tables/ directory (CSV files)\n")
cat("  - figures/ directory (PNG files - 3 visualizations)\n")

cat("\n")
print_separator()
cat("END OF ANALYSIS - ITERATION 8\n")
print_separator()

# END OF SCRIPT
